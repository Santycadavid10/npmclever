"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addOauthHeader = addOauthHeader;

var _oauth = _interopRequireDefault(require("oauth-1.0a"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function getSubtleCrypto() {
  // Browser environment
  if (globalThis.crypto?.subtle != null) {
    return globalThis.crypto?.subtle;
  } // Node environment
  else {
      const cryptoModule = await Promise.resolve().then(() => _interopRequireWildcard(require('node:crypto')));
      return cryptoModule.subtle;
    }
}

function addOauthHeader(tokens) {
  return async function (requestParams) {
    const cryptoSubtle = await getSubtleCrypto();
    const {
      method,
      url,
      headers,
      queryParams
    } = requestParams;
    const oauth = (0, _oauth.default)({
      consumer: {
        key: tokens.OAUTH_CONSUMER_KEY,
        secret: tokens.OAUTH_CONSUMER_SECRET
      },
      signature_method: 'HMAC-SHA512',

      async hash_function(baseString, key) {
        const encoder = new TextEncoder();
        const encodedText = encoder.encode(baseString);
        const encodedKey = encoder.encode(key);
        const cryptoKey = await cryptoSubtle.importKey('raw', encodedKey, {
          name: 'HMAC',
          hash: 'SHA-512'
        }, false, ['sign']);
        const result = await cryptoSubtle.sign({
          name: 'HMAC',
          hash: 'SHA-512'
        }, cryptoKey, encodedText);
        let binary = '';
        const bytes = new Uint8Array(result);
        const len = bytes.byteLength;

        for (let i = 0; i < len; i++) {
          binary += String.fromCharCode(bytes[i]);
        }

        const base64Result = globalThis.btoa(binary);
        return base64Result;
      }

    });
    const requestData = {
      url,
      method,
      data: queryParams
    };
    const oauthData = oauth.authorize(requestData, {
      key: tokens.API_OAUTH_TOKEN,
      secret: tokens.API_OAUTH_TOKEN_SECRET
    }); // unwrap promise

    oauthData.oauth_signature = await oauthData.oauth_signature;
    const oauthHeaders = oauth.toHeader(oauthData);
    return { ...requestParams,
      headers: { ...oauthHeaders,
        ...headers
      }
    };
  };
}